{"version":3,"sources":["webpack:///./src/utils/firestore.js","webpack:///./src/pages/index.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/layout.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firestore","latLonToMetres","lat1","lon1","lat2","lon2","dLat","Math","PI","dLon","a","sin","cos","d","atan2","sqrt","round","isLocationAvailable","App","props","_this","_React$Component","call","this","state","toilets","data","allToilets","nodes","slice","myLat","myLon","sortBy","sortByDistance","bind","assertThisInitialized_default","compareDistance","sortByName","updatePosition","handleChange","componentDidMount","event","setState","target","value","sort","t1","t2","lat","lon","console","log","name","localeCompare","_this2","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","forceUpdate","enableHighAccuracy","render","_this3","collection","get","then","snapshot","forEach","doc","id","catch","err","react_default","createElement","layout","main","onChange","style","tableLayout","map","toilet","index","key","gatsby_browser_entry","to","replace","React","Component","query","m","module","exports","require","default","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","__webpack_exports__","createContext","PropTypes","object","string","isRequired","func","gatsby__WEBPACK_IMPORTED_MODULE_1__","margin","maxWidth","padding","children","ProdPageRenderer","_ref","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","propTypes","shape"],"mappings":"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","file":"component---src-pages-index-js-b2b4655b03e6eba89899.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore'\n\nconst config = {\n  apiKey: \"AIzaSyAm31tTHPuaSkBR1Ff7pYAavUX6K1DlZ5g\",\n  authDomain: \"let-it-go-ce90f.firebaseapp.com\",\n  databaseURL: \"https://let-it-go-ce90f.firebaseio.com\",\n  projectId: \"let-it-go-ce90f\",\n  storageBucket: \"let-it-go-ce90f.appspot.com\",\n  messagingSenderId: \"243397254091\",\n  appId: \"1:243397254091:web:bede1631a9ce7f43\",\n}\n\nfirebase.initializeApp(config)\nconst db = firebase.firestore()\n\nexport default db\n","import React from \"react\"\nimport Layout from \"../components/layout\"\nimport { graphql } from \"gatsby\"\nimport { Link } from \"gatsby\"\nimport db from \"../utils/firestore\"\n\nfunction latLonToMetres(lat1, lon1, lat2, lon2) {\n  if (lat1 === null || lat2 === null || lon1 === null || lon2 === null) {\n    return \"Location not available\"\n  }\n  const R = 6371000 // Radius of the earth in m\n  const dLat = (lat2 - lat1) * (Math.PI / 180)\n  const dLon = (lon2 - lon1) * (Math.PI / 180)\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(lat1 * (Math.PI / 180)) *\n      Math.cos(lat2 * (Math.PI / 180)) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2)\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n  const d = R * c // Distance in m\n  return Math.round(d)\n}\n\nlet isLocationAvailable = true\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      toilets: this.props.data.allToilets.nodes.slice(0),\n      myLat: null,\n      myLon: null,\n      sortBy: `name`,\n    }\n\n    this.sortByDistance = this.sortByDistance.bind(this)\n    this.compareDistance = this.compareDistance.bind(this)\n    this.sortByName = this.sortByName.bind(this)\n    this.updatePosition = this.updatePosition.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  componentDidMount() {\n    this.updatePosition()\n  }\n\n  handleChange(event) {\n    this.setState({\n      sortBy: event.target.value,\n    })\n\n    if (event.target.value === \"name\") {\n      this.sortByName()\n    } else {\n      this.sortByDistance()\n    }\n  }\n\n  sortByDistance() {\n    let toilets = this.state.toilets.slice(0)\n    toilets.sort(this.compareDistance)\n\n    this.setState({\n      toilets: toilets,\n    })\n  }\n\n  compareDistance(t1, t2) {\n    const t1ToMe = latLonToMetres(\n      t1.lat,\n      t1.lon,\n      this.state.myLat,\n      this.state.myLon\n    )\n    const t2ToMe = latLonToMetres(\n      t2.lat,\n      t2.lon,\n      this.state.myLat,\n      this.state.myLon\n    )\n    return t1ToMe - t2ToMe\n  }\n\n  sortByName() {\n    console.log(\"test\")\n    let toilets = this.state.toilets.slice(0)\n    toilets.sort((t1, t2) => t1.name.localeCompare(t2.name))\n\n    this.setState({\n      toilets: toilets,\n    })\n  }\n\n  updatePosition() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        pos => {\n          this.setState({\n            myLat: pos.coords.latitude,\n            myLon: pos.coords.longitude,\n          })\n        },\n        () => {\n          isLocationAvailable = false\n          this.forceUpdate()\n        },\n        { enableHighAccuracy: true }\n      )\n    } else {\n      // Browser doesn't support Geolocation\n      isLocationAvailable = false\n      this.forceUpdate()\n    }\n  }\n\n  render() {\n    db.collection(\"toilets\")\n      .get()\n      .then(snapshot => {\n        snapshot.forEach(doc => {\n          console.log(doc.id, \"=>\", doc.data())\n        })\n      })\n      .catch(err => {\n        console.log(\"Error getting documents\", err)\n      })\n\n    console.log(this.state)\n    return (\n      <Layout main={true}>\n        <label>Sort by: </label>\n        <select value={this.state.sortBy} onChange={this.handleChange}>\n          <option value=\"name\">Name</option>\n          {isLocationAvailable && <option value=\"distance\">Distance</option>}\n        </select>\n        {!isLocationAvailable && (\n          <p>\n            Location services not working! (Add help popup, convert to\n            component)\n          </p>\n        )}\n        <table style={{ tableLayout: \"fixed\" }}>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Distance (m)</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.toilets.map((toilet, index) => (\n              <tr key={index}>\n                <td>\n                  <Link to={\"/\" + toilet.name.replace(/\\s/g, \"\")}>\n                    {toilet.name}\n                  </Link>\n                </td>\n                <td>\n                  {latLonToMetres(\n                    this.state.myLat,\n                    this.state.myLon,\n                    toilet.lat,\n                    toilet.lon\n                  )}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </Layout>\n    )\n  }\n}\n\nexport const query = graphql`\n  query {\n    allToilets(sort: { fields: name, order: ASC }) {\n      nodes {\n        name\n        lat\n        lon\n      }\n    }\n  }\n`\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nexport default (props) => (\n  <div style={{ margin: `3rem auto`, maxWidth: 650, padding: `0 1rem` }}>\n    {!props.main && <Link to=\"/\">Back</Link>}\n    {props.main && <h1>Let It Go</h1>}\n    {props.children}\n  </div>\n)\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}